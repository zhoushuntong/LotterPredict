package com.rigsec.lotteranalsis.dbdata;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BASIC_HISTROY_DATA".
*/
public class BasicHistroyDataDao extends AbstractDao<BasicHistroyData, Long> {

    public static final String TABLENAME = "BASIC_HISTROY_DATA";

    /**
     * Properties of entity BasicHistroyData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property LotterType = new Property(1, int.class, "lotterType", false, "LOTTER_TYPE");
        public final static Property First_number = new Property(2, int.class, "first_number", false, "FIRST_NUMBER");
        public final static Property Second_number = new Property(3, int.class, "second_number", false, "SECOND_NUMBER");
        public final static Property Three_number = new Property(4, int.class, "three_number", false, "THREE_NUMBER");
        public final static Property Four_number = new Property(5, int.class, "four_number", false, "FOUR_NUMBER");
        public final static Property Five_number = new Property(6, int.class, "five_number", false, "FIVE_NUMBER");
        public final static Property Six_number = new Property(7, int.class, "six_number", false, "SIX_NUMBER");
        public final static Property Seven_number = new Property(8, int.class, "seven_number", false, "SEVEN_NUMBER");
    }


    public BasicHistroyDataDao(DaoConfig config) {
        super(config);
    }
    
    public BasicHistroyDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASIC_HISTROY_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"LOTTER_TYPE\" INTEGER NOT NULL ," + // 1: lotterType
                "\"FIRST_NUMBER\" INTEGER NOT NULL ," + // 2: first_number
                "\"SECOND_NUMBER\" INTEGER NOT NULL ," + // 3: second_number
                "\"THREE_NUMBER\" INTEGER NOT NULL ," + // 4: three_number
                "\"FOUR_NUMBER\" INTEGER NOT NULL ," + // 5: four_number
                "\"FIVE_NUMBER\" INTEGER NOT NULL ," + // 6: five_number
                "\"SIX_NUMBER\" INTEGER NOT NULL ," + // 7: six_number
                "\"SEVEN_NUMBER\" INTEGER NOT NULL );"); // 8: seven_number
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASIC_HISTROY_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BasicHistroyData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getLotterType());
        stmt.bindLong(3, entity.getFirst_number());
        stmt.bindLong(4, entity.getSecond_number());
        stmt.bindLong(5, entity.getThree_number());
        stmt.bindLong(6, entity.getFour_number());
        stmt.bindLong(7, entity.getFive_number());
        stmt.bindLong(8, entity.getSix_number());
        stmt.bindLong(9, entity.getSeven_number());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BasicHistroyData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getLotterType());
        stmt.bindLong(3, entity.getFirst_number());
        stmt.bindLong(4, entity.getSecond_number());
        stmt.bindLong(5, entity.getThree_number());
        stmt.bindLong(6, entity.getFour_number());
        stmt.bindLong(7, entity.getFive_number());
        stmt.bindLong(8, entity.getSix_number());
        stmt.bindLong(9, entity.getSeven_number());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public BasicHistroyData readEntity(Cursor cursor, int offset) {
        BasicHistroyData entity = new BasicHistroyData( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // lotterType
            cursor.getInt(offset + 2), // first_number
            cursor.getInt(offset + 3), // second_number
            cursor.getInt(offset + 4), // three_number
            cursor.getInt(offset + 5), // four_number
            cursor.getInt(offset + 6), // five_number
            cursor.getInt(offset + 7), // six_number
            cursor.getInt(offset + 8) // seven_number
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BasicHistroyData entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setLotterType(cursor.getInt(offset + 1));
        entity.setFirst_number(cursor.getInt(offset + 2));
        entity.setSecond_number(cursor.getInt(offset + 3));
        entity.setThree_number(cursor.getInt(offset + 4));
        entity.setFour_number(cursor.getInt(offset + 5));
        entity.setFive_number(cursor.getInt(offset + 6));
        entity.setSix_number(cursor.getInt(offset + 7));
        entity.setSeven_number(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BasicHistroyData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BasicHistroyData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BasicHistroyData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
